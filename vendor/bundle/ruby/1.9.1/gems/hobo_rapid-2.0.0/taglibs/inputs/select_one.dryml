<!-- A `<select>` menu from which the user can choose the target record for a `belongs_to` association.

This is the default input that Rapid uses for `belongs_to` associations. The menu is constructed using the `to_s` representation of the records.

### Attributes

 - `include-none` - whether to include a 'none' option (i.e. set the foreign key to null).   If this value is not supplied, the default is "true" if the current value is nil; otherwise the default is "false".  One implication of this is that the default may change when the form is re-rendered due to a validation failure.  Setting this value explicitly is recommended.
 - `blank-message` - the message for the 'none' option. Defaults to "(No `<model-name-human>`)", e.g. "(No Product)"
 - `options` - an array of records to include in the menu. Defaults to the all the records in the target table that match any `:conditions` declared on the `belongs_to` (subject to `limit`)
 - `sort` - whether to sort the array of options. Defaults to no sorting.
 - `limit` - if `options` is not specified, this limits the number of records.  Default: 100
 - `text_method` - The method to call on each record to get the text for the option.  Multiple methods are supported ie "institution.name"

### See Also

For situations where there are too many target records to practically include in a menu, `<name-one>` provides an autocompleter which would be more suitable.

  -->
<def tag="select-one" attrs="include-none, blank-message, options, sort, limit, text-method"><%
  raise Hobo::PermissionDeniedError.new("Not allowed to edit #{this_field}") if !attributes[:disabled] && !can_edit?
  blank_message ||= ht("#{this_type.name.underscore}.messages.none", :default=>"No #{this_type.model_name.human} available.")
  limit ||= 100

  options ||= begin
    conditions = ActiveRecord::Associations::BelongsToAssociation.new(this_parent, this_field_reflection).options[:conditions]
    order = this_field_reflection.klass.default_order
    this_field_reflection.klass.all(:conditions => conditions, :limit => limit, :order => order).select {|x| can_view?(x)}
  end

  id_method = this_field_reflection.options[:primary_key] || this_field_reflection.klass.primary_key
  if text_method.nil?
    select_options = options.map { |x| [name(:with => x, :no_wrapper => true), x.send(id_method)] }
  else
    select_options = options.map do |x|
      [ text_method.split(".").inject(x) { |v, method| v.send(method) },
           x.send(id_method) ]
    end
  end
  select_options = select_options.sort if sort
  select_options.insert(0, [blank_message, ""]) if include_none || (this.nil? && include_none != false)
  attributes = add_classes(attributes, "input", "belongs_to", type_and_field)
  -%>
  <select name="#{param_name_for_this(true)}" merge-attrs="&attributes.except :name">
    <%= options_for_select(select_options, this ? this.send(id_method) : "") %>
  </select>
</def>
