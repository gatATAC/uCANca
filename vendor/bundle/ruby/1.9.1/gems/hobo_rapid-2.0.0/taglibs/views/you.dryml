# -*- coding: utf-8 -*-
<!-- Equivalent to `<you capitalize/>`-->
<def tag="You"><you merge capitalize/></def>

<!-- Convenience tag to help with the common situation where you need to address the current user as "you", and refer to other users by name

### Usage

The context should be a user object. If `this == current_user` the "you" form is rendered, otherwise the form with the user's name:

- `<you have/> new mail` -> "you have new mail" or "Jim has new mail"
- `<you are/> now an admin` -> "you are now an admin" or "Jim is now an admin"
- `<you do/>n't want to go there` -> "you don't want to go there" or "Jim doesn't want to go there"

The tag is also localized in the namespaces "tags.you.current_user" and "tags.you.other_user".
Each namespace can contain the legacy keys "have", "are", "do" used for the respective attributes,
and "nothing" used when no attribute is passed. But you can also use your own keys, providing
that you add the keys in the correct namespaces.

### Examples

    it:
      tags:
        you:
          current_user:
            nothing: "Tu"
            have: "Hai"
            are: "sei"
            can: "Puoi"
          other_user:
            nothing: "{{name}}"
            have: "{{name}} ha"
            are: "{{name}} è"
            can: "{{name}} può"

- `<you have/> un nuovo messaggio.` -> "Hai un nuovo messaggio." or "Jim ha un nuovo messaggio."
- `Adesso <you are/> amministratore.` -> "Adesso sei amministratore." or "Adesso Jim è amministratore."
- `<you can/> scrivere.` -> "Puoi scrivere." or "Jim può scrivere."

(note: :name is added by default as an interpolable variable)

### Attributes

- capitalize: the first letter of the resulting sentence will be capitalized


### Additional Notes

The "titleize" attribute is deprecated: use "capitalize" instead.

-->
<def tag="you" attrs="titleize, capitalize">
  <% Rails.logger.warn "'titleize' is a deprecated attribute of the 'you' tag. Please, use 'capitalize' instead." -%>
  <% raise ArgumentError, "You can add only one attribute-key to the 'you' tag." if attributes.size > 1 -%>
  <% k = case
         when attributes[:have] then 'have'
         when attributes[:are] then 'are'
         when attributes[:do] then 'do'
         end -%>
  <if test="&this == current_user">
    <%= s = t("tags.you.current_user.#{k || attributes.keys.first || 'default'}",:default=>"you #{k}")
       (titleize||capitalize) ? s.sub(/^./){|c| c.upcase} : s %>
  </if>
  <else>
    <do param="default">
      <%= s = t("tags.you.other_user.#{k || attributes.keys.first || 'default'}", :name=>name(:no_wrapper => true),
          :default=>"#{name(:no_wrapper => true)} #{'has' if attributes[:have]}#{'is' if attributes[:are]}#{'does' if attributes[:do]}")
          (titleize||capitalize) ? s.sub(/^./){|c| c.upcase} : s %>
    </do>
  </else>
</def>

<!-- Equivalent to `<your ... capitalize/>`-->
<def tag="Your"><your merge capitalize/></def>

<!-- Similar to `<you>`, but renders "Your" or "Fred's" or equivalent localized strings

### Attributes

- capitalize: the first letter of the resulting sentence will be capitalized
- count: used in pluralization. If omitted it will be set to 1.
- key: used to lookup the translation in the locale file. It allows 3 different options:
   - single key like 'message': simple translation in 'tags.your.message.current_user'
     or 'tags.your.message.other_user'
   - composite key like 'any.namespace.message': translation as for the previous case, but it will
     translate also the 'any.namespace.message' and will interpolate the variable `key` (in this case :message)
     in the translation
   - when key is omitted it will be set to "default" and will do the translation with that key.
     Pass other meaningful attributes to achieve a dynamic usage
- any other attribute passed to the tag will be used as a variable for interpolation

Notes

- The :name variable is added by default as an interpolable variable
- If no translation is found an automatic (only english) default is generated:
   the Your/Jim's string, joined to the tag content.
   If you pass an explicit 'default' attribute you will override the automatic default.


### Examples

    it:
      tags:
        your:
          message:
            current_user:
              one: "Tuo Messaggio"
              other: "Tuoi Messaggi"
            other_user:
              one: "Messaggio di {{name}}"
              other: "Messaggi di {{name}
          entry:
            current_user:
              one: "Tua {{entry}}"
              other: "Tue {{entry}}"
            other_user: "{{entry}} di {{name}}"

- `<your key="message" count=>"&messages.count"/>`:

 - count => 1: "Tuo Messaggio" or "Messaggio di Jim"
 - count => 5: "Tuoi Messaggi" or "Messaggi di Jim"

- `<your key="activerecord.models.entry" count=>"&this.entries.count"/>`:

 - count => 1: "Tua Entrata" or "Entrata di Jim"
 - count => 5: "Tue Entrate" or "Entrate di Jim"

- `<your>Posts</your>`: "your Posts" or "Jim's Posts"
 -->
<def tag="your" attrs="key, capitalize, name"><%=
   key ||= 'default'
   name ||= name(:no_wrapper => true)
   # prepare symbolized attributes for merging
   attrs = {}
   attributes.each_pair{|k,v| attrs[k.to_sym] = v}
   d = "#{h name}'#{'s' unless name.ends_with?('s')} #{all_parameters.default}"
   options = {:default=>[d], :count=>(attrs[:count]||1), :name=>name}
   your_key = key.split('.').last
   unless key.eql?(your_key) || attrs.has_key?(your_key.to_sym)
     options[your_key.to_sym] = t(key, :count=>options[:count], :default=>your_key.titleize)
   end
   s = if this == current_user
         options[:default].unshift :"tags.your.default.current_user"
         t("tags.your.#{your_key}.current_user", options.merge(attrs))
       else
         options[:default].unshift :"tags.your.default.other_user"
         t("tags.your.#{your_key}.other_user", options.merge(attrs))
       end
   (capitalize ? s.sub(/^./){|c| c.upcase} : s).html_safe
%></def>
